TMPDIR?=/tmp

POSTGIS_PGSQL_VERSION=@POSTGIS_PGSQL_VERSION@
POSTGIS_GEOS_VERSION=@POSTGIS_GEOS_VERSION@
POSTGIS_PROJ_VERSION=@POSTGIS_PROJ_VERSION@
HAVE_LIBXML2=@HAVE_LIBXML2@

# MingW hack: rather than use PGSQL_BINDIR directly, we change
# to the directory and then use "pwd" to return the path. This
# ensures that the returned path is in MSYS format, otherwise
# colons in drive letters will break PATH.
PGSQL_BINDIR=$(shell cd "@PGSQL_BINDIR@" && pwd)

# Where we put our regression installation 
srcdir=$(shell @PWDREGRESS@)
REGRESS_INSTALLDIR=$(srcdir)/00-regress-install

# 
# Put path from pg_config into front of search path
#
PATH := $(PGSQL_BINDIR):$(PATH)
export PATH


#wkt \

TESTS = \
	loader/Point \
	loader/PointM \
	loader/PointZ \
	loader/MultiPoint \
	loader/MultiPointM \
	loader/MultiPointZ \
	loader/Arc \
	loader/ArcM \
	loader/ArcZ \
	loader/Polygon \
	loader/PolygonM \
	loader/PolygonZ \
	loader/TSTPolygon \
	loader/TSIPolygon \
	loader/TSTIPolygon \
	loader/PointWithSchema \
	loader/NoTransPoint \
	loader/NotReallyMultiPoint \
	loader/MultiToSinglePoint \
	loader/ReprojectPts \
	loader/ReprojectPtsGeog \
	loader/Latin1 \
	regress \
	regress_index \
	regress_index_nulls \
	lwgeom_regress \
	regress_lrs \
	removepoint \
	setpoint \
	simplify \
	snaptogrid \
	summary \
	affine \
	measures \
	long_xact \
	ctors \
	sql-mm-serialize \
	sql-mm-circularstring \
	sql-mm-compoundcurve \
	sql-mm-curvepoly \
	sql-mm-general \
	sql-mm-multicurve \
	sql-mm-multisurface \
	polyhedralsurface \
	polygonize \
	postgis_type_name \
	out_geometry \
	out_geography \
	in_gml \
	in_kml \
	iscollection \
	regress_ogc \
	regress_ogc_cover \
	regress_ogc_prep \
	regress_bdpoly \
	regress_proj \
	regress_management \
	dump \
	dumppoints \
	wmsservers_new \
	tickets \
	remove_repeated_points \
	split \
	relate \
	concave_hull

# TESTS += wmsservers_old

ifeq ($(shell expr $(POSTGIS_GEOS_VERSION) ">=" 32),1)
	# GEOS-3.3 adds:
	# ST_HausdorffDistance, ST_Buffer(params)
	TESTS += \
		hausdorff \
		regress_buffer_params
endif

ifeq ($(shell expr $(POSTGIS_GEOS_VERSION) ">=" 33),1)
	# GEOS-3.3 adds:
	# ST_RelateMatch, ST_IsValidDetail, ST_SharedPaths ,
	# ST_Snap, ST_UnaryUnion, ST_MakeClean 
	TESTS += \
		offsetcurve \
		relatematch  \
		isvaliddetail \
		sharedpaths \
		snap \
		node \
		unaryunion \
		clean \
		relate_bnr
endif

all install uninstall distclean:

postgis.sql: ../postgis/postgis.sql
	sed 's,$$libdir,$(REGRESS_INSTALLDIR)/lib,g' ../postgis/postgis.sql > postgis.sql

staged-install:
	$(MAKE) -C ../postgis REGRESS=1 DESTDIR=$(REGRESS_INSTALLDIR) install
	#$(MAKE) -C ../loader REGRESS=1 DESTDIR=$(REGRESS_INSTALLDIR) install

test check: postgis.sql staged-install
	@USE_VERSION=$(POSTGIS_PGSQL_VERSION) ./run_test $(RUNTESTFLAGS) $(TESTS)

garden:
	createdb postgis_garden
	createlang plpgsql postgis_garden
	psql -d postgis_garden < ../postgis/postgis.sql
	psql -d postgis_garden < ../spatial_ref_sys.sql
	@echo '-------------------------------------------------'
	@echo 'Regression tests in progress (it will take time)'
	@echo 'Result output: ./regress/garden_result.txt'
	@echo '-------------------------------------------------'
	psql -d postgis_garden < ../doc/postgis_gardentest_${POSTGIS_MAJOR_VERSION}${POSTGIS_MINOR_VERSION}.sql > postgis_garden_result.txt 2>&1
	#dropdb postgis_garden

cleanup:
	@sleep 1
	@dropdb postgis_reg > /dev/null

clean:
	rm -rf $(REGRESS_INSTALLDIR)
	rm -f postgis.sql 
